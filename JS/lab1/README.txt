# README: Лабораторная работа по JavaScript

## 1. Инструкции по запуску проекта

Для запуска данного проекта:

1. Установите текстовый редактор (например, VS Code).
2. Установите Node.js с официального сайта.
3. Откройте DevTools в браузере (нажмите F12 и выберите вкладку Консоль).
4. Создайте файл `index.html` и вставьте следующий код:

   ```html
   <!DOCTYPE html>
   <html lang="ru">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>Лабораторная работа</title>
       <script src="script.js" defer></script>
   </head>
   <body>
       <h1>Открывайте консоль для просмотра результатов</h1>
   </body>
   </html>
   ```

5. Создайте файл `script.js` и вставьте в него код лабораторной работы.
6. Откройте `index.html` в браузере и откройте консоль (F12 → Console), чтобы увидеть результаты выполнения скрипта.

---

## 2. Описание лабораторной работы

### Задание 1. Выполнение кода в браузере

В рамках первого задания необходимо:
- Написать простые команды JavaScript в консоли браузера (`console.log("Hello, world!")` и `2 + 3`).
- Создать HTML-страницу и встроить в неё JavaScript-код.
- Подключить внешний JavaScript-файл.

### Задание 2. Работа с типами данных

- Объявление переменных (`name`, `birthYear`, `isStudent`) и вывод их значений в консоль.
- Работа с `prompt` и условными операторами (`if-else`).
- Использование циклов (`for`).

---

## 3. Краткая документация к проекту

- `alert("Этот код выполнен из внешнего файла!")` – показывает всплывающее окно с сообщением.
- `console.log("Сообщение в консоли")` – выводит сообщение в консоль браузера.
- Объявление переменных:
  - `let myName = "Daniel";` – строковая переменная с именем пользователя.
  - `let birthYear = 2004;` – числовая переменная с годом рождения.
  - `let isStudent = true;` – булевая переменная, обозначающая статус студента.
- `prompt("Введите ваш балл:")` – запрашивает у пользователя ввод оценки.
- Условный оператор `if-else` проверяет введенное значение и выводит соответствующее сообщение.
- Цикл `for` выполняет итерации с выводом номера итерации в консоль.

---

## 4. Примеры использования проекта

### Вывод сообщений

```js
alert("Этот код выполнен из внешнего файла!");
console.log("Сообщение в консоли");
```

### Ввод и обработка данных

```js
let score = prompt("Введите ваш балл:");
if (score >= 90) {
  console.log("Отлично!");
} else if (score >= 70) {
  console.log("Хорошо");
} else {
  console.log("Можно лучше!");
}
```

### Цикл `for`

```js
for (let i = 1; i <= 5; i++) {
  console.log(`Итерация: ` + i);
}
```

---

## 5. Ответы на контрольные вопросы

1. **Чем отличается var от let и const?**  
   - `var` имеет функциональную область видимости и может быть повторно объявлена.  
   - `let` имеет блочную область видимости и не может быть объявлена повторно в той же области.  
   - `const` работает как `let`, но не позволяет изменять значение переменной после присвоения.

2. **Что такое неявное преобразование типов в JavaScript?**  
   - Это автоматическое приведение одного типа данных к другому (например, `'5' + 3` превращается в `'53'`).

3. **Как работает оператор `==` в сравнении с `===`?**  
   - `==` выполняет неявное преобразование типов перед сравнением.
   - `===` сравнивает значения без преобразования типов.

---

## 6. Список использованных источников

- [MDN Web Docs: JavaScript](https://developer.mozilla.org/ru/docs/Web/JavaScript)
- [W3Schools: JavaScript Basics](https://www.w3schools.com/js/)

---

## 7. Дополнительные важные аспекты

- Можно добавить обработку ошибок при вводе данных (`NaN` при некорректном вводе в `prompt`).
- Можно использовать `const` и `let` вместо неявного объявления переменных.
- Улучшить читаемость кода с помощью интерполяции строк (`console.log(`${myName}\n${birthYear}\ni am student: ${isStudent}`);`).

